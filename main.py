from datetime import datetime
import pandas as pd
from flask import Flask, render_template, request
import firebase_admin
from firebase_admin import credentials, firestore, storage
import amisafe

cred_obj = credentials.Certificate('floodbase.json')
default_app = firebase_admin.initialize_app(cred_obj, {
    'databaseURL':'https://floodbase-15dfb.firebaseio.com'
})

db = firestore.client()
# read data
# get a document with known id # ID generated by firebase
# result = db.collection('floods').document("wxYseYm1bcltmQ4hiGtq").get()
result = db.collection('floods').stream()
# print(default_app.name)
# ref = db.reference("/floods/wxYseYm1bcltmQ4hiGtq")
# print(ref.get())

app = Flask(__name__)
# Ensure templates are auto-reloaded


@app.route("/")
def main():
    result = db.collection('floods').stream()
    flooded_results = dict()
    if result:
        for i,r in enumerate(result):
            db_result = r.to_dict()
            if ('flood' in list(db_result)) and (db_result['flood'] is True):
                flooded_results[i] = db_result
    print(flooded_results)

    df = pd.read_csv('https://gist.githubusercontent.com/mickeykedia/9d9144072c5f637c26995569dd347614/raw/b65134846607235adf4ad6498713deed77d3b4b5/ward_level_collated.csv')
    df_cropped = df.loc[:,['Ward_Alphabet','Ward_Names','TOT_P_DEN']].set_index(['Ward_Alphabet'])
    mumbai_dict = df_cropped.to_dict('index')

    return render_template("my_map.html",flooded_results = flooded_results, mumbai_dict=mumbai_dict)


@app.route("/amisafe", methods=["POST"])
def am_i_safe():
    coord = request.form.get("coord")
    print(f'coord: {coord}')
    lat, lon = coord.split(',')
    lat, lon = float(lat.strip()), float(lon.strip())
    ais = amisafe.AmISafe(lat_deg=lat,lon_deg=lon,zoom=15)
    itsxn_dict = ais.check_intersection(e1 = 1, e2 = 2,r1_meters = 50, r2_meters = 100, plot = False)
    print(f'itersection: {itsxn_dict}')

    result = db.collection('floods').stream()
    flooded_results = dict()
    if result:
        for i,r in enumerate(result):
            db_result = r.to_dict()
            if ('flood' in list(db_result)) and (db_result['flood'] is True):
                flooded_results[i] = db_result
    return render_template("amisafe.html", lat=lat, lon=lon, itsxn_dict=itsxn_dict,flooded_results = flooded_results)

if __name__ == "__main__":
    # for r in result:
    #     print(r.to_dict())
    app.jinja_env.auto_reload = True
    app.config["TEMPLATES_AUTO_RELOAD"] = True
    app.run(debug=False)

    # app.run(port=1111)